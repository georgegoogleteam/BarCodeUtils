using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BarCodeUtils
{
    public static class BarcodeUtils
    {
        public static string BarcodeInfo(int flag)
        {
            switch (flag)
            {
                case 0:
                    return @"List<string> lines = new List<string>();
for ...
                    string filePath = Path.Combine(System.IO.Directory.GetParent(Environment.CurrentDirectory).Parent.FullName + ""\\Resources\\"", ""output.txt"");
                    File.WriteAllLines(filePath, lines); ";
                case 1:
                    return @"//таймер на 1 минуту
private DispatcherTimer sessionTimer;
sessionTimer = new DispatcherTimer();
sessionTimer.Interval = TimeSpan.FromMinutes(1);
sessionTimer.Tick += SessionTimerTick; //метод обрабатывается после 1 минуты
sessionTimer.Start();";
                case 2:
                    return @"
string str = 'ERTYUIOPASDFGHJKLZXCVBNMqwertyuiopsdfghjklzxcvbnm1234567890';
string captcha = new string(str.OrderBy(c => Guid.NewGuid()).ToArray()).Substring(4);

< TextBlock TextDecorations = 'Strikethrough' FontWeight = 'Bold' Foreground = 'Red'/>
     ";
                case 3:
                    return @"//работа с штрихкодом
string file = System.IO.Directory.GetParent(Environment.CurrentDirectory).Parent.FullName + '\\Resources\\' + 'barcode.pdf';
GeneratedBarcode gen = BarcodeWriter.CreateBarcode('123456789012', BarcodeEncoding.EAN13);
                    gen.AddBarcodeValueTextBelowBarcode();
                    gen.SaveAsPdf(file);

                    BarcodeResults results = BarcodeReader.Read(file);
                    if (results != null)
                    {
                        foreach (BarcodeResult result in results)
                        {
                            MessageBox.Show(result.Text);
                        }
                    }
                    ";
                case 4:
                    return @"//загрузка фото
OpenFileDialog op = new OpenFileDialog();
op.Title = ""Select a picture"";
op.Filter = ""All supported graphics|*.jpg;*.jpeg;*.png|JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|Portable Network Graphic (*.png)|*.png"";
                    if (op.ShowDialog() == true)
                    {
                        string fileName = Guid.NewGuid() + op.SafeFileName;
                        string newFilePath = System.IO.Path.Combine(folderpath, fileName);
                        File.Copy(op.FileName, newFilePath);
                        imgPhoto.Source = new BitmapImage(new Uri(op.FileName)); ";
                case 5:
                    return @"//скл запрос таблицы
SELECT
COLUMN_NAME AS 'COLUMN_NAME',
DATA_TYPE +
CASE
WHEN CHARACTER_MAXIMUM_LENGTH IS NULL THEN ''
ELSE ' (' + CONVERT(NVARCHAR(10), CHARACTER_MAXIMUM_LENGTH) + ')'
END AS 'DATA_TYPE ( CHARACTER_MAXIMUM_LENGTH )',
case
when IS_NULLABLE = 'YES' THEN 'N'
else 'Y'
end as 'is_nullable'
FROM
INFORMATION_SCHEMA.COLUMNS
WHERE
TABLE_NAME = ''; ";
                case 6:
                    string code = @"//листвью
<ListView Grid.ColumnSpan=""6"" Grid.Row=""1"" x:Name=""ServicesList"" ScrollViewer.HorizontalScrollBarVisibility=""Disabled"" HorizontalContentAlignment=""Stretch"" SelectionChanged=""ServicesList_SelectionChanged"">
<ListView.ItemTemplate>
<DataTemplate>
<Border BorderBrush=""Black"" BorderThickness=""1"" Style=""{StaticResource mainBorder}"">
<Grid>
<Grid.ColumnDefinitions>
<ColumnDefinition Width=""3*""/>
<ColumnDefinition Width=""6*""/>
<ColumnDefinition Width=""2*""/>
</Grid.ColumnDefinitions>

<Border BorderBrush=""Black"" BorderThickness=""1"" Grid.Column=""0"" MaxHeight=""125"">
<Image Source=""{Binding Path=Photo, FallbackValue={StaticResource nullImage}}""/>
</Border>

<Border Grid.Column=""1"" BorderBrush=""Black"" BorderThickness=""1"">
<Grid>
<Grid.RowDefinitions>
<RowDefinition Height=""2*""/>
<RowDefinition Height=""2*""/>
<RowDefinition Height=""2*""/>
<RowDefinition Height=""2*""/>
</Grid.RowDefinitions>
<Label Grid.Row=""0"" Content=""{Binding Name}""/>
<StackPanel Grid.Row=""1"" Orientation=""Horizontal"">
<TextBlock Text=""{Binding Cost}"" Style=""{StaticResource saleBlock}""/>
<Label Content=""{Binding CostWithDiscount}""/>
<Label Content=""Рублей за""/>
<Label Content=""{Binding Duration}""/>
<Label Content=""минут.""/>
</StackPanel>

<StackPanel Grid.Row=""2"" Orientation=""Horizontal"">
<Label Content=""Скидка"" Style=""{StaticResource sale}""/>
<Label HorizontalContentAlignment=""Left"" Content=""{Binding Discount}"" Style=""{StaticResource sale}""/>
</StackPanel>
</Grid>
</Border>
</Grid>
</Border>
</DataTemplate>
</ListView.ItemTemplate>
</ListView>";
                    return code;

                case 7:
                    return @"//кнопка удаления
private void DeleteButton_Click(object sender, RoutedEventArgs e)
{
var elements = ServicesList.SelectedItems.Cast<Service>().ToList();

if (MessageBox.Show($'Вы точно хотите удалить следующие { elements.Count}
                    элементов ? ', 'Внимание!', MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
{
                        try
                        {
                            db.Services.RemoveRange(elements);
                            db.SaveChanges();
                            MessageBox.Show('Данные удалены!', 'Окно оповещений');
                            ServicesList.ItemsSource = db.Services.ToList();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message.ToString());
                        }
                    }
            }
            ";
                case 8:
                    return @"//датагрид с фото и кнопкой
<DataGrid Name=""productsGrid"" AutoGenerateColumns=""False"">
                <DataGrid.Columns>
                    <DataGridTextColumn Header=""ID"" Binding=""{Binding Product.ProductID}"" IsReadOnly=""True"" />
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Image Source=""{Binding Product.ProductPhoto}"" Height=""70"" Width=""70""/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header=""Артикул"" Binding=""{Binding Product.ProductArticleNumber}""  IsReadOnly=""True"" />
                    <DataGridTextColumn Header=""Название"" Binding=""{Binding Product.ProductName}""  IsReadOnly=""True"" />
                    <DataGridTextColumn Header=""Тип единицы"" Binding=""{Binding UnitType.UnitTypeName}""  IsReadOnly=""True"" />
                    <DataGridTemplateColumn >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation=""Horizontal"">
                                    <TextBlock Text=""Кол-во:"" VerticalAlignment=""Center""/>
                                    <TextBox Name=""textBox"" Text=""{Binding Quantity, Mode=TwoWay}"" Margin=""5,0,10,0"" MinWidth=""50"" VerticalAlignment=""Center"" MaxLength=""2"" TextChanged=""textBox_TextChanged""/>
                                    <Button Content=""Убрать"" VerticalAlignment=""Center"" Click=""Button_Click""/>
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>";
                case 9:
                    return @"//метод обработки текстбох в пункте 8
private void textBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            var textBox = sender as TextBox;
            var row = textBox?.DataContext as ProductObjectClass;
            try
            {
                int quantity = Convert.ToInt32(textBox.Text);
                if (quantity == 0)
                {
                    var result = MessageBox.Show('Вы хотите убрать товар?', 'Внимание', MessageBoxButton.YesNo);
                    if (result == MessageBoxResult.Yes)
                    {
                        productObjects.Remove(row);
                        productsGrid.Items.Refresh();
                    }
                    else
                    {
                        textBox.Text = '1';
                        productObjects.FirstOrDefault(v => v.Product == row.Product).Quantity = quantity;
                    }
            }
                else
                productObjects.FirstOrDefault(v => v.Product == row.Product).Quantity = quantity;
            refreshOrderData();
        }
            catch
            {
                textBox.Text = '';
            }
}
";
                case 10:
                    return @" // работа с ворд
var app = new Word.Application();
            Word.Document doc = app.Documents.Add();

            // создание параграфа и добавление текста
            Word.Paragraph para = doc.Content.Paragraphs.Add();
            para.Range.Text = ""ТАЛОН"";
            para.Range.Font.Size = 14;
            para.Range.Font.Bold = 1;
            para.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
            para.Range.InsertParagraphAfter();

            // добавление даты и номера заказа
            para.Range.Text = $""Номер заказа: {result.OrderID}\nДата заказа: {result.OrderCreateDate.ToShortDateString()}"";
            para.Range.Font.Size = 12;
            para.Range.Font.Bold = 0;
            para.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
            para.Range.InsertParagraphAfter();

            para.Range.Text = ""Состав заказа:"";
            para.Range.Font.Size = 12;
            para.Range.Font.Bold = 0;
            para.Range.InsertParagraphAfter();

            foreach (var product in productObjects)
            {
                para.Range.Text = $""  - {product.Product.ProductName}: {product.Quantity} шт. x {product.Product.ProductCost} руб. = {product.Product.ProductCost * product.Quantity} руб."";
                para.Range.Font.Size = 12;
                para.Range.Font.Bold = 0;
                para.Range.InsertParagraphAfter();
            }

            para.Range.Text = $""Сумма заказа: {totalPrice}\nСумма скидки: {totalPrice-price}"";
            para.Range.Font.Size = 12;
            para.Range.Font.Bold = 0;
            para.Range.InsertParagraphAfter();

            para.Range.Text = $""Пункт выдачи: {comboBoxPickUp.SelectedValuePath}"";
            para.Range.Font.Size = 12;
            para.Range.Font.Bold = 0; 
            para.Range.InsertParagraphAfter();

            Word.Range codeRange = doc.Content.Paragraphs.Add().Range;
            codeRange.Text = $""Код получения: {getCode}"";
            codeRange.Font.Size = 14;
            codeRange.Font.Bold = 1;
            codeRange.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
            codeRange.InsertParagraphAfter();

            string filename = $""Талон заказа{result.OrderID.ToString()}.pdf"";

            app.Visible = true;
            doc.SaveAs2(@""D:\""+filename, Word.WdExportFormat.wdExportFormatPDF);
            MessageBox.Show(@""Товар оформлен. Талон сохранен по пути: D:\"" + filename, ""Результат"");";
                case 11:
                    return @"//создание таблицы в ворд
var allProducts = db.InvoiceProduct.Where(obj => obj.InvoiceId == invoice.InvoiceId).ToList();
                Word.Paragraph tableParagraph = document.Paragraphs.Add();
                Word.Range tableRange = tableParagraph.Range;
                Word.Table regionsTable = document.Tables.Add(tableRange, allProducts.Count() + 1, 4);
                regionsTable.Borders.InsideLineStyle = regionsTable.Borders.OutsideLineStyle = Word.WdLineStyle.wdLineStyleSingle;
                regionsTable.Range.Cells.VerticalAlignment = Word.WdCellVerticalAlignment.wdCellAlignVerticalCenter;
                Word.Range cellRange;
                cellRange = regionsTable.Cell(1, 1).Range;
                cellRange.Text = ""Название товара"";

                cellRange = regionsTable.Cell(1, 2).Range;
                cellRange.Text = ""Категория"";
                cellRange = regionsTable.Cell(1, 3).Range;
                cellRange.Text = ""Количество"";
                cellRange = regionsTable.Cell(1, 4).Range;
                cellRange.Text = ""Цена"";
                regionsTable.Rows[1].Range.Bold = 1;
                regionsTable.Rows[1].Range.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;

                int iter = 1;
                foreach(var product in allProducts)
                {
                    cellRange = regionsTable.Cell(iter + 1, 1).Range;
                    cellRange.Text = product.Product.Name;
                    cellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                    cellRange.Font.Bold = 0;
                    cellRange = regionsTable.Cell(iter + 1, 2).Range;
                    cellRange.Text = product.Product.Category;
                    cellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                    cellRange.Font.Bold = 0;
                    cellRange = regionsTable.Cell(iter + 1, 3).Range;
                    cellRange.Text = product.Quantity.ToString();
                    cellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                    cellRange.Font.Bold = 0;
                    cellRange = regionsTable.Cell(iter + 1, 4).Range;
                    cellRange.Text = product.Price.ToString();
                    cellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                    cellRange.Font.Bold = 0;
                    iter++;
                }";
                case 12:
                    string code2 = @"//эксель
private void TicketOutButton_Click(object sender, RoutedEventArgs e)
{
var orders = CurrentOrder;
var app = new Microsoft.Office.Interop.Excel.Application
{
SheetsInNewWorkbook = 1
};
this.CurrentOrder = new Order();
var workbook = app.Workbooks.Add(Type.Missing);
Microsoft.Office.Interop.Excel.Worksheet worksheet = app.Worksheets.Item[1];
worksheet.Name = ""Card"";
worksheet.Cells[1][1] = ""Order number"";
worksheet.Cells[1][2] = ""Product list"";
worksheet.Cells[1][2] = ""Product list"";
worksheet.Cells[1][3] = ""Total cost"";

worksheet.Cells[2][1] = orders.OrderID;

var fullProductList = string.Empty;
fullProductList = orders.OrderProduct.Aggregate(fullProductList,
(current, product) => current + $""{product.Product.ProductName}\n"");
worksheet.Cells[2][2] = fullProductList;
worksheet.Cells[2][3] = orders.OrderProduct.Sum(p => p.Product.ProductCost);

worksheet.Columns.AutoFit();

app.Visible = true;

app.Application.ActiveWorkbook.SaveAs(@""C:\Users\Airat\Desktop\sportmaindataGrid\WpfSport\test.xlsx"");

var excelDocument = app.Workbooks.Open(@""C:\Users\Airat\Desktop\sportmaindataGrid\WpfSport\test.xlsx"");

excelDocument.ExportAsFixedFormat(Microsoft.Office.Interop.Excel.XlFixedFormatType.xlTypePDF, @""C:\Users\Airat\Desktop\sportmaindataGrid\WpfSport\test.pdf"");
excelDocument.Close(false, """", false);
app.Quit();
}";

                    return code2;
                case 13:
                    return @"//контекстное меню по нажатию по правой кнокпи мыши
                    ContextMenu contextMenu = new ContextMenu();
                    MenuItem addMenuItem = new MenuItem();
                    addMenuItem.Header = ""Добавить к заказу"";
                    addMenuItem.Tag = product;
                    contextMenu.Items.Add(addMenuItem);
                    addMenuItem.Click += BtnAdd_Click;
                    mainPanel.ContextMenu = contextMenu; ";
                default:
                    return "";

            }
        }
        public static bool CheckBarcode(string barcodeValue)
        {
            if (barcodeValue.Length != 13)
                return false;

            int checksum = 0;
            for (int i = 0; i < 12; i++)
            {
                int digit = int.Parse(barcodeValue[i].ToString());
                checksum += (i % 2 == 0) ? digit : digit * 3;
            }

            int checksumDigit = (10 - (checksum % 10)) % 10;
            int lastDigit = int.Parse(barcodeValue[12].ToString());

            if (checksumDigit != lastDigit)
                return false;

            return true;
        }
    }
}
